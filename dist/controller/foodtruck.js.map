{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","req","res","newFoodTruck","name","body","foodType","averageCost","geometry","coordinates","lat","long","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","reviews","$lte","put","delete","status","remove","_id","review","newReview","title","text","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport FoodTruck from '../model/foodtruck';\nimport Review from '../model/review';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // CRUD - Create Read Update Delete\n\n  // '/v1/foodtruck/add' - Create\n  api.post('/add',authenticate,(req, res) => {\n    let newFoodTruck = new FoodTruck();\n    newFoodTruck.name = req.body.name;\n    newFoodTruck.foodType = req.body.foodType;\n    newFoodTruck.averageCost = req.body.averageCost;\n    newFoodTruck.geometry.coordinates.lat  = req.body.geometry.coordinates.lat;\n    newFoodTruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n\n    newFoodTruck.save(err => {\n      if (err) {\n        res.send(err);\n      }\n      res.json({ message: 'FoodTruck saved successfully'});\n    });\n  });\n\n  // '/v1/foodtruck' - Read\n  api.get('/', (req, res) => {\n    FoodTruck.find({},(err, foodtrucks) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Read 1\n  api.get('/:id', (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtruck);\n    });\n  });\n\n  // get reviews for a specific food truck id - Read 2\n  // 'v1/foodtruck/reviews/:id'\n  api.get('/reviews/:id', (req, res) => {\n    Review.find({foodtruck: req.params.id}, (err, reviews) => {\n      if(err){\n        res.send(err);\n      }\n      res.json(reviews);\n    });\n  });\n\n  // get foodtrucks that have an averagecost less than or equal to :averageCost parameter\n  // 'v1/foodtruck/averageCost/:averageCost'\n  api.get('/averageCost/:averageCost', (req, res) => {\n    FoodTruck.find({averageCost: {$lte: req.params.averageCost} }, (err, foodtrucks) => {\n      if(err){\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n // get foodtrucks by foodType\n // '/v1/foodtruck/foodtype/:foodtype' - Read 3\n api.get('/foodType/:foodType', (req, res) => {\n   FoodTruck.find({'foodType' : req.params.foodType}, (err, foodtrucks) => {\n     if(err){\n       res.send(err);\n     }\n     res.json(foodtrucks);\n   });\n });\n\n  // '/v1/foodtruck/:id' - Update\n  api.put('/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      foodtruck.name = req.body.name;\n      foodtruck.foodType = req.body.foodType;\n      foodtruck.averageCost = req.body.averageCost;\n      foodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n      foodtruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n      foodtruck.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({message: \"FoodTruck info updated\"});\n      });\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Delete\n  api.delete('/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if(err) {\n\tres.status(500).send(err);\n\treturn;\n      }\n      if (foodtruck === null) {\n        res.status(404).send('FoodTruck not found');\n\treturn;\n      }\n      FoodTruck.remove({\n\t_id: req.params.id\n      }, (err, foodtruck) => {\n         if(err) {\n          res.status(500).send(err);\n\t  return;\n        }\n\tReview.remove({\n     \t  foodtruck: req.params.id\n\t}, (err, review) => {\n\t  if(err) {\n\t    res.send(err);\n\t  }\n          res.json({message: 'FoodTruck successfully removed'});\n          });\n        });\n      });\n    });\n\n// add review for a specific foodtruck id\n// 'v1/foodtruck/reviews/add/:id'\napi.post('/reviews/add/:id', authenticate, (req, res) => {\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\n    if(err) {\n      res.send(err);\n    }\n    let newReview = new Review();\n\n    newReview.title = req.body.title;\n    newReview.text = req.body.text;\n    newReview.foodtruck = foodtruck._id;\n    newReview.save((err, review) => {\n      if(err){\n        res.send(err);\n      }\n      foodtruck.reviews.push(newReview);\n      foodtruck.save((err) => {\n        if(err){\n          res.send(err);\n        }\n        res.json({message: 'Food truck review saved!'});\n      });\n    });\n  });\n});\n\n  return api;\n}\n"]}